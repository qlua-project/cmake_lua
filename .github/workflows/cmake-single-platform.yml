# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "v5.4.1" ]
  pull_request:
    branches: [ "v5.4.1" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GENERATOR: NMake Makefiles
  c_compiler: cl
  cpp_compiler: cl

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        BUILD_DIR_NAME=cmake-build-${{env.BUILD_TYPE}}-${{runner.arch}}; echo "build-output-dir=${{github.workspace}}/${BUILD_DIR_NAME,,}" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -G "${{env.GENERATOR}}" -B "${{steps.strings.outputs.build-output-dir}}" --install-prefix "${{github.workspace}}" -Wdev --warn-uninitialized --log-context -L
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_CXX_COMPILER=${{ env.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ env.c_compiler }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{steps.strings.outputs.build-output-dir}} --config ${{env.BUILD_TYPE}}

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}

